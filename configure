#!/usr/bin/env bash

if (( ${BASH_VERSION:0:1} < 4 )); then
  echo "This configure script requires at least Bash 4"
  if [[ "$OSTYPE" == darwin* ]]; then
    echo "On macOS, you can upgrade it using Homebrew <https://brew.sh/> by typing: brew install bash"
  fi
  exit 1
fi

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

declare -A tools=()
declare -A desired=()

vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_for() {
  echo -n "Checking for $1... "
  if ! [ -z "${desired[$1]}" ]; then
    TOOL_PATH="${desired[$1]}"
  else
    TOOL_PATH=$(command -v $1)
  fi
  if ! [ -x "$TOOL_PATH" -a -f "$TOOL_PATH" ]; then
    printf "${RED}not found${NC}\n"
    cd - > /dev/null
    exit 1
  else
    printf "${GREEN}found${NC}\n"
    tools[$1]=$TOOL_PATH
  fi
}



check_ginkgo_version() {
  echo -n "Checking ginkgo version... "
  GINKGO_VERSION=$(${tools[ginkgo]} version | ${tools[awk]} '{print $3}')
  vercomp $GINKGO_VERSION 1.10
  case $? in
    0) ;&
    1)
      printf "${GREEN}"
      echo $GINKGO_VERSION
      printf "${NC}"
      ;;
    2)
      printf "${RED}"
      echo "$GINKGO_VERSION < 1.10"
      exit 1
      ;;
  esac
}

check_go_version() {
  echo -n "Checking go version... "
  GO_VERSION=$(${tools[go]} version | ${tools[awk]} '{where = match($0, /[0-9]\.[0-9]+[\.0-9]*/); if (where != 0) print substr($0, RSTART, RLENGTH)}')
  vercomp $GO_VERSION 1.12
  case $? in
    0) ;&
    1)
      printf "${GREEN}"
      echo $GO_VERSION
      printf "${NC}"
      ;;
    2)
      printf "${RED}"
      echo "$GO_VERSION < 1.12"
      exit 1
      ;;
  esac
}



for arg in "$@"; do
  case ${arg%%=*} in
    "--with-make")
      desired[make]="${arg##*=}"
      ;;
    "--with-awk")
      desired[awk]="${arg##*=}"
      ;;
    "--with-sed")
      desired[sed]="${arg##*=}"
      ;;
    "--with-ginkgo")
      desired[ginkgo]="${arg##*=}"
      ;;
    "--with-go")
      desired[go]="${arg##*=}"
      ;;
    "--with-golangci-lint")
      desired[golangci-lint]="${arg##*=}"
      ;;
    "--help")
      printf "${GREEN}$0${NC}\n"
      printf "  available options:\n"
      printf "  --with-go=${BLUE}<path_to_go_binary>${NC}\n"
      exit 0
      ;;
    *)
      echo "Unknown option: $arg"
      exit 2
      ;;
  esac
done


cd ${0%/*}

check_for make
check_for awk
check_for sed
check_for ginkgo
check_ginkgo_version
check_for go
check_go_version
check_for golangci-lint


cat <<- EOF > .env
MAKE := ${tools[make]}
AWK := ${tools[awk]}
SED := ${tools[sed]}
GINKGO := ${tools[ginkgo]}
GO := ${tools[go]}
GOLANGCI-LINT := ${tools[golangci-lint]}
EOF

echo "Environment configuration written to .env"

cd - > /dev/null